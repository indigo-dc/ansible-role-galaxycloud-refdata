---
- name: Check galaxyctl
  command: '{{ galaxyctl_bin_path }}/galaxyctl --version'
  ignore_errors: true
  changed_when: false # read-only task
  register: galaxyctl_is_installed
  become_user: root
  become_method: sudo

- name: Set galaxy restart command
  set_fact:
    galaxy_restart: "{{ galaxyctl_bin_path }}/galaxyctl restart galaxy -c {{ galaxy_config_file }} --force"
  when: galaxyctl_is_installed.rc == 0

#______________________________________
# Docker restart galaxy only if running.

- name: '[Docker] check if galaxy is running'
  stat: path=/var/log/galaxy/uwsgi.pid
  register: galaxy_pid 
  when: ansible_virtualization_type == "docker"

- name: '[Docker] Restart Galaxy with galaxyctl'
  command: '{{ galaxy_restart }}'
  ignore_errors: yes
  become_user: root
  become_method: sudo
  when:
    - ansible_virtualization_type == "docker"
    - galaxy_pid.stat.exists
    - galaxyctl_is_installed.rc == 0

- name: '[Docker] Restart Galaxy supervisorctl'
  supervisorctl:
    name: 'galaxy:'
    state: started
  become_user: root
  become_method: sudo
  when:
    - ansible_virtualization_type == "docker"
    - galaxy_pid.stat.exists
    - galaxyctl_is_installed.rc != 0


#______________________________________
# VM (always restart galaxy, to ensure it is running).

- name: '[VM] Restart Galaxy with galaxyctl'
  command: '{{ galaxy_restart }}'
  ignore_errors: yes
  become_user: root
  become_method: sudo
  when:
    - ansible_virtualization_type != "docker"
    - galaxyctl_is_installed.rc == 0

- name: '[VM] Restart Galaxy with supervisorctl'
  supervisorctl:
    name: 'galaxy:'
    state: started
  become_user: root
  become_method: sudo
  when:
    - ansible_virtualization_type != "docker"
    - galaxyctl_is_installed.rc != 0

- name: '[VM] Check if Galaxy is on line'
  uri:
    url: '{{ galaxy_instance_url }}'
  register: result
  until: result.status == 200
  retries: 30
  delay: 10
  when: ansible_virtualization_type != "docker"
